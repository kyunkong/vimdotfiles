#!/usr/bin/env bash
#------------------------------------------------------------------------
# File Name:     vim.wrapper.sh
# Author:        Fung Kong
# Mail:          kyun.kong@gmail.com
# Created Time:  2016-12-20 20:46:57
# Description:   This script is for synchronizing my VIM configuration with
#                my github repository, including installing to a new machine,
#                pull/update from the github, push the local modification
#                to the github
# Platform:      Linux
#------------------------------------------------------------------------
timeStamp=$(date +%Y%m%d)
logfile=~/vim.wrapper.$timeStamp.log
branch=master
gitdir=~/.vim

# define the usage hint
usage(){
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo "+++Synchronize the vim configuration file with the github+++++++++++"
    echo "+++Usage: $(basename $0) -i   # install the config to a new machine
                          -u   # update/pull from the github
                          -p   # push local repo to the github "
    echo 'curl -L https://raw.githubusercontent.com/Fung920/vimdotfile/master/vim.wrapper.sh.old|bash -s -- -i'
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    exit 1
}

# only accept one parameter
if [[ $# -ne 1 ]]; then
    echo "+++I can only accept one parameter..."
    usage
fi

# check the local git repository exists
dirstatus(){
    if [[ ! -d $gitdir ]]; then
        echo -e "+++Local git repository doesn't exist...\n" |tee -a $logfile
        dirstat=0
    else
        dirstat=1
    fi
    return $dirstat
}

# check the git status
gitstatus(){
    if [[ -n "$(git status --porcelain)" ]]; then
        echo -e "+++Your local repo is not clean." |tee -a $logfile
        gitstat=0
    else
        gitstat=1
    fi
    return $gitstat
}

# define the main function for the newly installation
INSTALL(){
    # backup is alway essential
    dirstatus
    if [[ $dirstat == 1 ]]; then
        echo -e "+++Backing up the $gitdir dir...\nmv $(gitdir) $(gitdir)_old_$timeStamp" |tee -a $logfile
        mv $gitdir $(gitdir)_old_$timeStamp   |tee -a $logfile
        echo -e "+++Backing up $gitdir folder done...\n" |tee -a $logfile
    fi
    for file in ~/.bashrc ~/.vimrc ~/.inputrc ~/.dircolors ~/.screenrc
    do
        echo -e "+++Backing up $file...\nmv $file ${file}.${timeStamp}.bak"|tee -a $logfile
        mv $file ${file}.${timeStamp}.bak |tee -a $logfile
        echo -e "+++Backup the $file end...\n"|tee -a $logfile
    done

    # clone the repository from github
    git clone https://github.com/Fung920/vimdotfile.git $gitdir |tee -a $logfile
    ln -s $gitdir/vimrc ~/.vimrc|tee -a $logfile
    ln -s $gitdir/bashrc ~/.bashrc|tee -a $logfile
    ln -s $gitdir/inputrc ~/.inputrc|tee -a $logfile
    ln -s $gitdir/dircolors ~/.dircolors|tee -a $logfile
    ln -s $gitdir/screenrc ~/.screenrc|tee -a $logfile

    # Solarized color theme setting
    echo -e "+++Please run the following commands to configure the gnome-terminal color theme\n"|tee -a $logfile
    echo -e '\e[1;31m
    eval `dircolors ~/.dircolors`
    sh $gitdir/gnome-terminal-colors-solarized/set_dark.sh
    \e[0m
    ' |tee -a $logfile

    echo -e "+++Installation done...\n" |tee -a $logfile
}


UPDATE(){
    dirstatus
    if [[ $dirstat == 0 ]]; then
        exit 1
    else
        cd $gitdir
        gitstatus
        if [[ $gitstat == 0 ]]; then
            echo -e "+++Would you like to overwritten by the remote repo?(Y/y or N/n)"|tee -a $logfile
            typeset -u choice
            echo ">"
            read choice
            # echo $choice
            case $choice in
                Y) git reset --hard
                    git pull origin $branch
                    ;;
                N) echo -e "+++Please resolve the conflicts by manually and run the script again...\n"|tee -a $logfile
                    exit 1
                    ;;
                *) echo -e "+++Invalid option, please enter Y/y or N/n...\n"|tee -a $logfile
                    # exit 1
                    UPDATE
                    ;;
            esac
        else
            echo -e "+++The local repo is clean, pull repo from remote to local is in action...\n"|tee -a $logfile
            git pull origin $branch
        fi
    fi
}


PUSH(){
    dirstatus
    if [[ $dirstat == 0 ]]; then
        exit 1
    else
        cd $gitdir
        echo -e "+++Please enter a commit message here...\n"|tee -a $logfile
        read msg
        git add . --all
        git commit -m "$msg"
        git push origin $branch
    fi
}


while getopts :iup opt
do
    case $opt in
        i) INSTALL
            ;;
        u) UPDATE
            ;;
        p) PUSH
            ;;
        *) usage
            ;;
    esac
done
